{
  "format_version": "1.13.0",
  "minecraft:feature_rules": {
    "description": {
      "identifier": "badger:rule_ff_glacier_flower",
      "places_feature": "badger:feature_ff_glacier_flower_scatter"
    },
    "conditions": {
      "enabled": true,
      "placement_pass": "surface_pass",
      "minecraft:biome_filter": [
        {
          "test": "has_biome_tag",
          "operator": "==",
          "value": "ff_glacier_mountain"
        }
      ]
    },
    "distribution": {
      "iterations": "temp.zscatterfix = math.random(4,30); temp.xscatterfix = math.random(4,30); return math.random(15,45);",
      "scatter_chance": "temp.minminheight = query.heightmap(variable.originx, variable.originz);\r\ntemp.minmaxheight = query.heightmap(variable.originx, variable.originz + 16);\r\ntemp.maxminheight = query.heightmap(variable.originx + 16, variable.originz);\r\ntemp.maxmaxheight = query.heightmap(variable.originx + 16, variable.originz + 16);\r\ntemp.midheight = query.heightmap(variable.originx + 8, variable.originz + 8);\r\n\r\ntemp.maxheight = math.max(temp.minminheight, math.max(temp.minmaxheight, math.max(temp.maxminheight, math.max(temp.maxmaxheight, temp.midheight))));\r\ntemp.minheight = math.min(temp.minminheight, math.min(temp.minmaxheight, math.min(temp.maxminheight, math.min(temp.maxmaxheight, temp.midheight))));\r\n\r\n return (temp.maxheight - temp.minheight) > 1 ? 0 : 100;",
      "x": {
        "distribution": "gaussian",
        "extent": [
          "temp.xscatterfix",
          "temp.xscatterfix + 20"
        ]
      },
      "y": "query.heightmap(variable.worldx, variable.worldz)",
      "z": {
        "distribution": "gaussian",
        "extent": [
          "temp.zscatterfix",
          "temp.zscatterfix + 20"
        ]
      }
    }
  }
}